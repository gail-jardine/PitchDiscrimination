#pragma once

#include <stdio.h>
#include "SynthsBasic.h"
/* redundant headers */
#include "AudioBasics.h"


/* used to select the first tone and the last tone */
/* *
* which distribution to use
*/
typedef enum RELATIONSHIP
{
	LOG,
	EXP,
	LIN,
	INV
} rdist;
/* * function that determines the frequency of the first note
* returns: int value of frequency of note to generate in Hz
* in: iLow: the lowest possible frequency to return
* in: iHigh: the highest possible frequency to return
* Usage notes: Currently used to generate the first of two tones,
	* where the second tone is generated to be within a certain range of the first.
	* Note that the range of values the second tone could take may be greater than the range of values
	* generated by this function, and so this range should possibly be less than the expected audible range.
	* Note also that enDistribution == exponential pattern EXP makes the most sense here, since notes are attained by frequencies
	* using the inverse of an exponential pattern (the LOG pattern)
	* However, this might be open for optional alternatives in the future.
* */
int genFrequency(int iLow, int iHigh);
/* * function that generates a second frequency within a certain number of cents of the first frequency,
*	or else returns the first frequency. 
* returns: int value of frequency of note to generate in Hz
* in: iFirstFreq: the first tone whose neighbor we are generating
* in: iMinCentsAway: the minimum number of cents difference, supposing there is any difference.
* in: iMaxCentsAway: the maximum number of cents difference, supposing there is any difference.
* in: enDistribution: used to determine how many cents different should be used.
	*	ToDo: DESCRIBE THIS BETTER
	*	ToDo: It might make more sense for this to be a pointer to a function, or perhaps I should simplify matters
	*		and just make the code the same in all cases.
* in: fSameFreq: A value in [0.0, 1.0], representing the percentage of the time that the new frequency is the same as iFirstFreq.
	* The rest of the time, the new frequency is either greater or smaller, and each of these options should be equally likely.
* */
int genFrequencyNearby(int iFirstFreq, int iMinCentsAway, int iMaxCentsAway, dist enDistribution, float fSameFreq);

/* run the process */
/* * given 2 frequencies and a tone generating function, tests the user on whether the second tone is higher or lower.
* returns: ToDo: error code??? void?
* out: szTestOutput: an allocated string 
* in/out: piStringLen: length of the string, including '\0'.
	* as an input, the maximum allowed length of the string. 10, if a null pointer. I think this might be risky and I should just make a separate input.
	* as an output, the length of allocated characters for szTestOutput.
* in: iFirstFreq: first frequency to play
* in: iSecFreq: second frequency to play
* in: : the function that generates the first and second tone using the specified frequencies. also gives a name.
* 
* * ToDo: below: possible ways this function could be expanded in the future:
* in: union: settings (e.g., whether the user can request to replay the string, whether second tone played immediately). Optional.
* in: max length of string to output
* */
void frequencyTest(char* szTestOutput, int* piStringLen, int iFirstFreq, int iSecFreq,
	int (*fnWaveform) (waveform* pWave, int nSamples, int nSampleRate, double frequency)/*FUNCTION tone,*/);

/* * 
* run tests
* should this output the strings, or should it just write them to files? may just output them, annoying though that is?
* */
int runFrequencyTests(char* szTestOutput, int* piStringLen,
	int iLow, int iHigh, 
	int (*fnWaveform) (waveform* pWave, int nSamples, int nSampleRate, double frequency),/*FUNCTION tone,*/
	enum dist enDistOfCentsDifference, float fSameFreq);

/* size_t: size in bytes. Do I want to use this, or an int for the number of elements in the array?
in the case of char*, I perhaps should just use size_t. */


/* * top level function that explains how to proceed
* */
int pitchDiscriminationMain();